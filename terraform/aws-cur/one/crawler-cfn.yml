AWSTemplateFormatVersion: 2010-09-09
Resources:

  AWSCURDatabase:
    Type: 'AWS::Glue::Database'
    Properties:
      DatabaseInput:
        Name: 'enterprisekubecost_${ACCOUNT_NUM}'
      CatalogId: !Ref AWS::AccountId

  AWSCURCrawler:
    Type: 'AWS::Glue::Crawler'
    DependsOn:
      - AWSCURDatabase
    Properties:
      Name: 'enterprisekubecost_${ACCOUNT_NUM}'
      Description: A recurring crawler that keeps your CUR table in Athena up-to-date.
      Role: 'arn:aws:iam::${ACCOUNT_NUM}:role/awskubecost-AWSCURCrawlerComponentFunction'
      Schedule:
        ScheduleExpression: cron(15 12 * * ? *)
      DatabaseName: !Ref AWSCURDatabase
      TablePrefix: 'enterprisekubecost_'
      Targets:
        S3Targets:
          - Path: 's3://${CUR_BUCKET}/${CUR_PREFIX}/${ACCOUNT_NUM}/'
            Exclusions:
              - '**.json'
              - '**.yml'
              - '**.sql'
              - '**.csv'
              - '**.gz'
              - '**.zip'
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: DELETE_FROM_DATABASE
  AWSCURInitializer:
    Type: 'AWS::Lambda::Function'
    DependsOn: AWSCURCrawler
    Properties:
      Code:
        ZipFile: >
          const { GlueClient, StartCrawlerCommand } = require('@aws-sdk/client-glue');
          const response = require('./cfn-response');
          exports.handler = function(event, context, callback) {
          console.log(event);
          console.log(context);
            try {
              if (event.RequestType === 'Delete') {
                response.send(event, context, response.SUCCESS);
              } else {
                let glue = new GlueClient();
                const params = { Name: `enterprisekubecost-${ACCOUNT_NUM}` };
                async () => {
                  const data = await glue.send(new StartCrawlerCommand(params));
                };
                if (event.ResponseURL) {
                  response.send(event, context, response.SUCCESS);
                } else {
                  context.succeed(response.SUCCESS);
                }
              }
            } catch (err) {
              if (err.name === 'CrawlerRunningException') {
                context.fail(err.message);
              } else {
                const responseString = JSON.stringify(err);
                if (event.ResponseURL) {
                  response.send(event, context, response.FAILED, { msg: responseString });
                } else {
                  context.fail(responseString);
                }
              }
            }
          };
      Handler: 'index.handler'
      Timeout: 30
      Runtime: nodejs20.x
      ReservedConcurrentExecutions: 1
      Role: 'arn:aws:iam::${ACCOUNT_NUM}:role/awskubecost-AWSCURCrawlerLambdaExecutor'

  AWSStartCURCrawler:
    Type: 'Custom::AWSStartCURCrawler'
    Properties:
      ServiceToken: !GetAtt AWSCURInitializer.Arn

  AWSS3CUREventLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt AWSCURInitializer.Arn
      Principal: 's3.amazonaws.com'
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub 'arn:$${AWS::Partition}:s3:::${CUR_BUCKET}/${CUR_PREFIX}/${ACCOUNT_NUM}/'

  AWSCURReportStatusTable:
    Type: 'AWS::Glue::Table'
    DependsOn: AWSCURDatabase
    Properties:
      DatabaseName: 'enterprisekubecost_${ACCOUNT_NUM}'
      CatalogId: !Ref AWS::AccountId
      TableInput:
        Name: 'cost_and_usage_data_status'
        TableType: 'EXTERNAL_TABLE'
        StorageDescriptor:
          Columns:
            - Name: status
              Type: 'string'
          InputFormat: 'org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat'
          OutputFormat: 'org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat'
          SerdeInfo:
            SerializationLibrary: 'org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe'
          Location: '${CUR_COST_AND_USAGE_DATA_STATUS_PATH}'